// Essays Master - FIXED Single-Instance Script with Global State
(function() {
    'use strict';
    
    // üîç PROBE A: Track script loading and initialization
    console.count('EM: script loaded');
    
    // ‚úÖ STRONGER GLOBAL CHECK - Prevent any duplicates
    if (window.essaysMasterActive) {
        console.warn('EM: abort duplicate init - already active');
        return; // Silent exit if already active
    }
    window.essaysMasterActive = true;
    console.count('EM: init called');
    
    console.log("Essays Master: FIXED script starting - " + new Date().toISOString());

// ‚úÖ GLOBAL STATE MANAGEMENT - Prevent multiple instances
window.essaysMasterState = window.essaysMasterState || {
    roundCount: 0,
    isProcessing: false,
    buttonCreated: false
};

// ‚úÖ SIMPLE INITIALIZATION - No overlapping timers
function initEssaysMaster() {
    console.log("Essays Master: Initializing...");
    
    // Only run on quiz attempt pages with essay questions
    if (!window.location.href.includes('/mod/quiz/attempt.php') || 
        !document.querySelector('textarea[name*="answer"]')) {
        console.log("Essays Master: Not an essay quiz attempt page");
        return;
    }

    // Prevent duplicate buttons
    if (window.essaysMasterState.buttonCreated) {
        console.log("Essays Master: Button already created, skipping");
        return;
    }

    // Hide original submit buttons (simple approach)
    hideOriginalButtons();
    
    // Create our submit button
    createEssaysSubmitButton();
    
    window.essaysMasterState.buttonCreated = true;
    console.log("Essays Master: Initialization complete");
}

// ‚úÖ SIMPLE BUTTON HIDING - No aggressive intervals
function hideOriginalButtons() {
    const finishButton = document.getElementById('mod_quiz-next-nav');
    if (finishButton) {
        finishButton.style.display = 'none';
        window.essaysMasterOriginalButton = finishButton;
        console.log("Essays Master: Hidden original finish button");
    }
}

// ‚úÖ CREATE SUBMIT BUTTON - Clean and simple with FIXED logic
function createEssaysSubmitButton() {
    const textarea = document.querySelector('textarea[name*="answer"]');
    if (!textarea) return;
    
    // Check if button already exists
    if (document.getElementById('essays-master-submit')) {
        console.log("Essays Master: Submit button already exists");
        return;
    }
    
    // Find insertion point
    const insertLocation = textarea.closest('.fcontainer') || textarea.parentNode;
    
    // Create container
    const container = document.createElement('div');
    container.style.cssText = 'text-align: right; margin: 15px 0; padding: 10px 0;';
    container.id = 'essays-master-container';
    
    // Create submit button
    const submitBtn = document.createElement('button');
    submitBtn.type = 'button';
    submitBtn.textContent = 'Submit for Feedback';
    submitBtn.className = 'btn btn-primary';
    submitBtn.style.cssText = 'background-color: #0f6cbf; border-color: #0a58ca; color: white; padding: 8px 16px; border-radius: 4px; font-size: 14px; margin: 5px;';
    submitBtn.id = 'essays-master-submit';
    
    // Create feedback area
    const feedbackArea = document.createElement('div');
    feedbackArea.id = 'essays-feedback';
    feedbackArea.style.cssText = 'margin-top: 10px; padding: 15px; background: #f8f9fa; border-radius: 5px; display: none;';
    
    container.appendChild(submitBtn);
    container.appendChild(feedbackArea);
    
    // Insert after textarea
    insertLocation.parentNode.insertBefore(container, insertLocation.nextSibling);
    
    // Add SINGLE click handler with FIXED logic
    submitBtn.addEventListener('click', handleSubmitClick);
    
    function handleSubmitClick(e) {
        e.preventDefault();
        
        // üîç PROBE A: Track click handler firing
        console.count('EM: click handler fired');
        console.log('EM: Current round count:', window.essaysMasterState.roundCount);
        
        // Prevent multiple simultaneous requests
        if (window.essaysMasterState.isProcessing) {
            console.warn('EM: Request already processing, ignoring click');
            return;
        }
        
        // Check if 3 rounds completed - FINAL SUBMISSION
        if (window.essaysMasterState.roundCount >= 3) {
            console.log("Essays Master: 3 rounds complete - triggering final submission");
            if (window.essaysMasterOriginalButton) {
                window.essaysMasterOriginalButton.style.display = '';
                window.essaysMasterOriginalButton.click();
            }
            return;
        }
        
        // Increment round count BEFORE processing
        window.essaysMasterState.roundCount++;
        window.essaysMasterState.isProcessing = true;
        
        console.log('EM: Processing round', window.essaysMasterState.roundCount, 'of 3');
        
        submitBtn.disabled = true;
        submitBtn.textContent = 'Processing...';
        
        // Show feedback area
        feedbackArea.style.display = 'block';
        feedbackArea.innerHTML = '<div style="text-align: center; padding: 20px;"><strong>üîÑ Processing Round ' + window.essaysMasterState.roundCount + ' of 3...</strong></div>';
        
        // Get feedback
        getFeedback(window.essaysMasterState.roundCount, function(success, response) {
            window.essaysMasterState.isProcessing = false;
            submitBtn.disabled = false;
            
            if (success) {
                // Display feedback - REPLACE content, don't append
                feedbackArea.innerHTML = '<h4>üìù Feedback Round ' + window.essaysMasterState.roundCount + ' of 3</h4>' +
                    '<div style="background: white; padding: 15px; border-radius: 5px; margin: 10px 0;">' +
                    response.feedback.replace(/\n/g, '<br/>') + '</div>';
                
                if (window.essaysMasterState.roundCount >= 3) {
                    submitBtn.textContent = 'Submit Final Answer';
                    feedbackArea.innerHTML += '<div style="text-align: center; padding: 10px; background: #d4edda; border-radius: 5px; margin-top: 10px;"><strong>‚úÖ Ready for Final Submission</strong></div>';
                } else {
                    submitBtn.textContent = 'Submit for More Feedback (' + (3 - window.essaysMasterState.roundCount) + ' remaining)';
                }
            } else {
                // Show error and ROLLBACK round count
                feedbackArea.innerHTML = '<div style="color: #dc3545; padding: 15px; text-align: center;"><strong>Error:</strong> ' + response + '</div>';
                submitBtn.textContent = 'Submit for Feedback';
                window.essaysMasterState.roundCount--; // Rollback on error
                console.log('EM: Error occurred, rolled back to round', window.essaysMasterState.roundCount);
            }
        });
    }
    
    console.log("Essays Master: Submit button created with state management");
}

// ‚úÖ SIMPLE FEEDBACK API CALL
function getFeedback(round, callback) {
    const attemptId = getAttemptId();
    if (!attemptId) {
        callback(false, 'Could not find attempt ID');
        return;
    }
    
    console.log('EM: Making AJAX request for round', round, 'attempt', attemptId);
    
    const xhr = new XMLHttpRequest();
    xhr.open('POST', M.cfg.wwwroot + '/local/essaysmaster/get_feedback.php', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.timeout = 15000; // 15 second timeout
    
    xhr.onload = function() {
        console.log('EM: AJAX response received, status:', xhr.status);
        if (xhr.status === 200) {
            try {
                const response = JSON.parse(xhr.responseText);
                console.log('EM: Parsed response:', response.success ? 'SUCCESS' : 'FAILED');
                callback(response.success, response);
            } catch (e) {
                console.error('EM: JSON parse error:', e);
                callback(false, 'Invalid response from server');
            }
        } else {
            console.error('EM: HTTP error:', xhr.status);
            callback(false, 'Server error: ' + xhr.status);
        }
    };
    
    xhr.onerror = function() {
        console.error('EM: Network error');
        callback(false, 'Network error');
    };
    
    xhr.ontimeout = function() {
        console.error('EM: Request timeout');
        callback(false, 'Request timeout');
    };
    
    // üîç PROBE B: Generate client nonce for idempotency
    const nonce = (crypto?.randomUUID?.() || String(Math.random())).slice(0, 16);
    console.log('EM: Generated nonce for round ' + round + ':', nonce);
    
    const data = 'attemptid=' + encodeURIComponent(attemptId) +
                 '&round=' + encodeURIComponent(round) +
                 '&nonce=' + encodeURIComponent(nonce) +
                 '&sesskey=' + encodeURIComponent(M.cfg.sesskey);
    
    console.log('EM: Sending data:', data.replace(/&sesskey=[^&]+/, '&sesskey=***'));
    xhr.send(data);
}

// ‚úÖ SIMPLE ATTEMPT ID EXTRACTION
function getAttemptId() {
    const urlParams = new URLSearchParams(window.location.search);
    const attempt = urlParams.get('attempt');
    if (attempt) return attempt;
    
    const attemptInput = document.querySelector('input[name="attempt"]');
    if (attemptInput) return attemptInput.value;
    
    return null;
}

// ‚úÖ SINGLE INITIALIZATION - No multiple timers
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initEssaysMaster);
} else {
    initEssaysMaster();
}

console.log("Essays Master: FIXED script loaded successfully");

})(); // End of IIFE wrapper

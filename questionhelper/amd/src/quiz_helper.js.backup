// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * JavaScript module for the question helper plugin
 *
 * @package    local_questionhelper
 * @copyright  2025
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

define(['jquery', 'core/ajax', 'core/modal_factory', 'core/modal_events', 'core/str'],
function($, Ajax, ModalFactory, ModalEvents, Str) {

    var ATTEMPT_KEY_PREFIX = 'questionhelper_q';
    var MAX_ATTEMPTS = 3;

    /**
     * Initialize the plugin on quiz attempt pages
     */
    function init() {
        console.log('QuestionHelper: Initializing plugin...');
        console.log('QuestionHelper: Current URL:', window.location.pathname);

        if (isQuizAttemptPage()) {
            console.log('QuestionHelper: On quiz attempt page, loading plugin...');
            addCSSStyles();

            // Add a small delay to ensure page is fully loaded
            setTimeout(function() {
                scanAndAddHelpButtons();
            }, 1000);
        } else {
            console.log('QuestionHelper: Not on quiz attempt page, skipping...');
        }
    }

    /**
     * Add CSS styles to the page
     */
    function addCSSStyles() {
        if ($('#questionhelper-styles').length > 0) {
            return; // Already added
        }

        var css = `
        .question-helper-btn {
            margin-left: 10px;
            font-size: 13px;
            transition: all 0.3s ease;
        }
        .question-helper-btn:hover {
            transform: translateY(-1px);
        }
        .question-helper-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        .question-helper-container {
            margin: 10px 0;
            text-align: right;
        }
        .question-helper-popup {
            max-width: 600px;
            padding: 20px;
        }
        .question-helper-popup h3 {
            color: #495057;
            font-size: 1.2em;
            margin-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 5px;
        }
        .practice-question-section {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #17a2b8;
        }
        .practice-question-section p {
            margin-bottom: 10px;
            font-weight: 500;
        }
        .practice-question-section ul {
            list-style-type: none;
            padding-left: 0;
        }
        .practice-question-section li {
            background: #fff;
            margin: 5px 0;
            padding: 8px 12px;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }
        .practice-question-section li:before {
            content: "â—‹ ";
            color: #6c757d;
            font-weight: bold;
        }
        .concept-explanation-section {
            background: #e7f3ff;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #007bff;
        }
        .concept-explanation-section p {
            margin-bottom: 0;
            line-height: 1.5;
            color: #495057;
        }
        .popup-footer {
            border-top: 1px solid #dee2e6;
            padding-top: 15px;
            margin-top: 20px;
        }
        @media (max-width: 768px) {
            .question-helper-popup {
                padding: 15px;
            }
            .practice-question-section,
            .concept-explanation-section {
                padding: 12px;
            }
            .question-helper-btn {
                font-size: 12px;
                margin-left: 5px;
            }
            .question-helper-container {
                text-align: center;
            }
        }
        `;

        $('<style id="questionhelper-styles">' + css + '</style>').appendTo('head');
    }

    /**
     * Check if current page is a quiz attempt page
     * @return {boolean}
     */
    function isQuizAttemptPage() {
        return window.location.pathname.includes('/mod/quiz/attempt.php');
    }

    /**
     * Scan for multiple choice questions and add help buttons
     */
    function scanAndAddHelpButtons() {
        console.log('QuestionHelper: Scanning for questions...');

        // Look for multiple choice questions with various selectors
        var questionSelectors = [
            '.que.multichoice',
            '.que[data-qtype="multichoice"]',
            '.question.multichoice',
            '.que:has(.answer input[type="radio"])',
            '.que:contains("Choose one")'
        ];

        var questionsFound = 0;

        questionSelectors.forEach(function(selector) {
            $(selector).each(function(index) {
                var questionElement = $(this);
                // Skip if already processed
                if (questionElement.find('.question-helper-btn').length > 0) {
                    return;
                }

                var questionId = extractQuestionId(questionElement);
                var attempts = getAttemptCount(questionId);
                console.log('QuestionHelper: Found question with ID:', questionId);
                addHelpButton(questionElement, questionId, attempts);
                questionsFound++;
            });
        });

        console.log('QuestionHelper: Total questions found:', questionsFound);

        // If no questions found, try a broader search
        if (questionsFound === 0) {
            console.log('QuestionHelper: No multichoice questions found, searching all questions...');
            $('.que').each(function(index) {
                var questionElement = $(this);
                if (questionElement.find('input[type="radio"]').length > 0) {
                    var questionId = extractQuestionId(questionElement);
                    var attempts = getAttemptCount(questionId);
                    console.log('QuestionHelper: Found radio question with ID:', questionId);
                    addHelpButton(questionElement, questionId, attempts);
                    questionsFound++;
                }
            });
        }

        console.log('QuestionHelper: Final count:', questionsFound);
    }

    /**
     * Extract question ID from question element
     * @param {jQuery} questionElement
     * @return {string}
     */
    function extractQuestionId(questionElement) {
        var classes = questionElement.attr('class').split(/\s+/);
        for (var i = 0; i < classes.length; i++) {
            if (classes[i].startsWith('que-')) {
                return classes[i];
            }
        }
        return 'q' + questionElement.index();
    }

    /**
     * Add help button to a question
     * @param {jQuery} questionElement
     * @param {string} questionId
     * @param {number} attempts
     */
    function addHelpButton(questionElement, questionId, attempts) {
        console.log('QuestionHelper: Adding button to question:', questionId);

        // Find the best location for the button - try multiple locations
        var targetContainer = null;
        var locations = [
            '.submitbtns',
            '.mod_quiz-next-nav',
            '.im-controls',
            '.questionflag',
            '.answer',
            '.ablock',
            '.content'
        ];

        for (var i = 0; i < locations.length; i++) {
            targetContainer = questionElement.find(locations[i]).first();
            if (targetContainer.length > 0) {
                console.log('QuestionHelper: Found target container:', locations[i]);
                break;
            }
        }

        // If still no container, create one after question text
        if (targetContainer.length === 0) {
            var qtext = questionElement.find('.qtext').first();
            if (qtext.length > 0) {
                qtext.after('<div class="question-helper-container"></div>');
                targetContainer = questionElement.find('.question-helper-container');
                console.log('QuestionHelper: Created custom container');
            }
        }

        // Last resort - add to the question element itself
        if (targetContainer.length === 0) {
            questionElement.prepend('<div class="question-helper-container"></div>');
            targetContainer = questionElement.find('.question-helper-container');
            console.log('QuestionHelper: Added container to question element');
        }

        if (targetContainer.length === 0) {
            console.log('QuestionHelper: Could not find target container for question:', questionId);
            return; // Can't find suitable location
        }

        var helpButton = createHelpButton(questionId, attempts);

        // Insert button in the right position
        var prevButton = targetContainer.find('.prevpage');
        if (prevButton.length > 0) {
            prevButton.after(helpButton);
        } else {
            targetContainer.prepend(helpButton);
        }

        console.log('QuestionHelper: Button added successfully');
    }

    /**
     * Create help button element
     * @param {string} questionId
     * @param {number} attempts
     * @return {jQuery}
     */
    function createHelpButton(questionId, attempts) {
        var button = $('<button type="button" class="btn question-helper-btn"></button>');
        button.data('question-id', questionId);

        updateButtonState(button, attempts);

        button.on('click', function(e) {
            e.preventDefault();
            handleHelpClick($(this));
        });

        return button;
    }

    /**
     * Update button state based on attempts
     * @param {jQuery} button
     * @param {number} attempts
     */
    function updateButtonState(button, attempts) {
        if (attempts >= MAX_ATTEMPTS) {
            button.text('Help exhausted')
                  .addClass('btn-secondary')
                  .removeClass('btn-info')
                  .prop('disabled', true);
        } else {
            button.html('ðŸ¤” Get Help')
                  .addClass('btn-info')
                  .removeClass('btn-secondary')
                  .prop('disabled', false);
        }
    }

    /**
     * Handle help button click
     * @param {jQuery} button
     */
    function handleHelpClick(button) {
        var questionId = button.data('question-id');
        var attempts = getAttemptCount(questionId);

        if (attempts >= MAX_ATTEMPTS) {
            return;
        }

        var questionElement = button.closest('.que');
        var questionData = extractQuestionData(questionElement);

        if (!questionData.text || !questionData.options) {
            showError('Question data could not be extracted');
            return;
        }

        // Update attempt count
        attempts = incrementAttempt(questionId);
        updateButtonState(button, attempts);

        // Show loading state
        button.html('Getting help...').prop('disabled', true);

        // Make AJAX request
        makeHelpRequest(questionData)
            .then(function(response) {
                showHelpModal(response);
            })
            .catch(function(error) {
                showError('Unable to get help. Please try again.');
                console.error('Help request failed:', error);
            })
            .always(function() {
                updateButtonState(button, attempts);
            });
    }

    /**
     * Extract question data from question element
     * @param {jQuery} questionElement
     * @return {object}
     */
    function extractQuestionData(questionElement) {
        var questionText = questionElement.find('.qtext').text().trim();
        var options = [];

        questionElement.find('.answer .r0, .answer .r1').each(function() {
            var optionText = $(this).text().trim();
            if (optionText) {
                options.push(optionText);
            }
        });

        return {
            text: questionText,
            options: options.join('\n'),
            id: extractQuestionId(questionElement)
        };
    }

    /**
     * Make AJAX request for help
     * @param {object} questionData
     * @return {Promise}
     */
    function makeHelpRequest(questionData) {
        var urlParams = new URLSearchParams(window.location.search);
        var attemptId = urlParams.get('attempt');

        return $.ajax({
            url: M.cfg.wwwroot + '/local/questionhelper/get_help.php',
            method: 'POST',
            data: {
                questiontext: questionData.text,
                options: questionData.options,
                attemptid: attemptId,
                sesskey: M.cfg.sesskey
            },
            dataType: 'json',
            timeout: 15000
        });
    }

    /**
     * Show help content in a modal
     * @param {object} response
     */
    function showHelpModal(response) {
        if (!response.success) {
            showError(response.error || 'Unknown error occurred');
            return;
        }

        var modalContent = buildModalContent(response);

        ModalFactory.create({
            type: ModalFactory.types.DEFAULT,
            title: 'ðŸ¤” Question Helper',
            body: modalContent
        }).then(function(modal) {
            modal.show();

            modal.getRoot().on(ModalEvents.hidden, function() {
                modal.destroy();
            });

            // Add close button handler
            modal.getRoot().find('.question-helper-close').on('click', function() {
                modal.hide();
            });
        });
    }

    /**
     * Build modal content HTML
     * @param {object} response
     * @return {string}
     */
    function buildModalContent(response) {
        var html = '<div class="question-helper-popup">';

        if (response.practice_question) {
            html += '<h3>ðŸŽ¯ Practice Question</h3>';
            html += '<div class="practice-question-section">';
            html += '<p>' + $('<div>').text(response.practice_question).html() + '</p>';

            if (response.options && response.options.length > 0) {
                html += '<ul>';
                response.options.forEach(function(option) {
                    html += '<li>' + $('<div>').text(option).html() + '</li>';
                });
                html += '</ul>';
            }
            html += '</div>';
        }

        if (response.concept_explanation) {
            html += '<h3>ðŸ’¡ Key Concept</h3>';
            html += '<div class="concept-explanation-section">';
            html += '<p>' + $('<div>').text(response.concept_explanation).html() + '</p>';
            html += '</div>';
        }

        html += '<div class="popup-footer text-center mt-3">';
        html += '<button type="button" class="btn btn-primary question-helper-close">Got it!</button>';
        html += '</div>';

        html += '</div>';

        return html;
    }

    /**
     * Show error message
     * @param {string} message
     */
    function showError(message) {
        ModalFactory.create({
            type: ModalFactory.types.DEFAULT,
            title: 'Error',
            body: '<div class="alert alert-danger">' + message + '</div>'
        }).then(function(modal) {
            modal.show();
            setTimeout(function() {
                modal.hide();
            }, 3000);
        });
    }

    /**
     * Get attempt count for a question
     * @param {string} questionId
     * @return {number}
     */
    function getAttemptCount(questionId) {
        var key = ATTEMPT_KEY_PREFIX + questionId;
        var data = sessionStorage.getItem(key);
        if (data) {
            try {
                return JSON.parse(data).attempts || 0;
            } catch (e) {
                return 0;
            }
        }
        return 0;
    }

    /**
     * Increment attempt count for a question
     * @param {string} questionId
     * @return {number}
     */
    function incrementAttempt(questionId) {
        var key = ATTEMPT_KEY_PREFIX + questionId;
        var attempts = getAttemptCount(questionId) + 1;
        sessionStorage.setItem(key, JSON.stringify({
            attempts: attempts,
            timestamp: new Date().toISOString()
        }));
        return attempts;
    }

    return {
        init: init
    };
});